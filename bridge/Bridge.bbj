use com.basiscomponents.db.DataRow
use com.google.gson.Gson
use com.google.gson.JsonArray
use com.google.gson.JsonElement
use com.google.gson.JsonObject
use com.google.gson.JsonParser
use com.google.gson.reflect.TypeToken

if argc = 2 and cvs(argv(1),3)>"" then
    goto RemoteSession
fi

rem -------------default: run as a servlet

data! = BBjAPI().getServletData(err=publish)
Bridge! = new Bridge()
data!.setCallback(data!.ON_WEB_CONNECTION, Bridge!, "servletRequest")
PROCESS_EVENTS
STOP

rem -------------publish the servlet

publish:

admin! = BBjAPI().getAdmin("admin", "admin123")
registry! = admin!.getServletRegistry()
config! = BBjAPI().getConfig()
appServer! = admin!.getWebAppServer()

application! = appServer!.makeEmptyAppConfig()
application!.setProgramName(pgm(-1))
application!.setWorkingDirectory(dsk("")+dir(""))
application!.setConfigFile( BBjAPI().getConfig().getCurrentCommandLineObject().getConfigFile())
application!.setClasspathName(BBjAPI().getConfig().getCurrentCommandLineObject().getOriginalClasspathName())

bridgeurl$="/bridge"
bridgeurl$="/"+stbl("BRIDGEURL",err=*next)
registry!.unpublish(bridgeurl$, err=*next)
registry!.publish(bridgeurl$, application!)

release


rem -------------the remote session itself that's holding all stuff and handles the requests

RemoteSession:
BBjAPI().getConfig().setOptionSetting("ERROR_UNWINDS", 1)
ses$ = argv(1)
dummy$=stbl("SESSIONID",ses$)
debug=num(stbl("DEBUG",err=*next),err=*next)

if (debug) then
    System.out.println("New Session "+ses$)
fi
if (debug >1) then
    open (998,mode="O_CREATE,O_TRUNC")"/usr2/tmp/"+ses$+".trace"
    settrace (998)
fi

if (debug) then
    System.out.println("Prefix: "+PFX)
    System.out.println("WD: "+dir(""))
fi

call "PrepSession.bbj",err=*next

requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM")
responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")
c_resolver! = new com.basiscomponents.db.constants.BBjNamespaceConstantsResolver(BBjAPI().getNamespace("sessionconst","X"+ses$,1),err=*next)

bridge_timeout=600; REM seconds
bridge_timeout = num(stbl("BRIDGE_TIMEOUT",err=*next),err=*next)

main_loop:

    seterr execerr
	dummy$=STBL("!SESSIONINFO",ses$+" - idle"); REM idle = Leerlauf

    rem requestSemaphore!.acquire()
    if !requestSemaphore!.tryAcquire(1,bridge_timeout,java.util.concurrent.TimeUnit.SECONDS) then
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM")
        release
    fi

    request!=BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST")

    if cvs(request!,4)="BYE" then
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE","Goodbye!")
        responseSemaphore!.release()
        release
    fi

REM     inp! = new String(request!,"UTF-8")
REM     request!=str(inp!.getBytes(info(1,2)))

    if (debug) then
        System.out.println("-------------request-------------------------------")
        System.out.println(request!)
        System.out.println("---------------------------------------------------")
    fi


    jelement! = new JsonParser().parse(request!)
    jobject! = jelement!.getAsJsonObject(err=execerr)

    tid!=jobject!.get("tid")
    if tid!<>null() then
        tid$=tid!.getAsString()
    fi


    file! = jobject!.getAsJsonPrimitive("file")
    if file! <> null() then
        file$=str(file!)
        if file$(1,1)="""" then
            file$=file$(2,len(file$)-2)
        fi
        if (debug) then
            System.out.println("Trying file: "+file$)
        fi
        response$="file:"+file$
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response$)
        responseSemaphore!.release()

        goto main_loop
    fi


    rem parse incoming variables and set them to interpreter
    jarray! = jobject!.getAsJsonArray("vars")
    if jarray! <> null() then
        it! = jarray!.iterator()
        while it!.hasNext()
            j!=it!.next()
            rem System.out.println(j!.toString())
            name$=j!.get("n").getAsString()
            type$=j!.get("t").getAsString()

            if type$="str" then
                value$=new String(j!.get("v").getAsString(),"utf-8").getBytes(info(1,2))
                ex$=name$+"! = """+value$+""""

                execute ex$
            else
                if type$="bool" then
                    value!=j!.get("v").getAsBoolean()
                    if str(value!)="true" then
                        ex$=name$+"! = Boolean.TRUE"
                    else
                        ex$=name$+"! = Boolean.FALSE"
                    fi
                    execute ex$
                else
                    if type$="num" then
                        value$=j!.get("v").getAsString()
                        ex$=name$+"! = "+value$
                        execute ex$
                    else
                        if type$="dr" then
                            value!=j!.get("v")
                            if value! = com.google.gson.JsonNull.INSTANCE then
                                ex$ = name$+"! = null()"
                            else
                                if value!.getClass().getName() = "com.google.gson.JsonArray" then
                                    value! = new String(value!.toString(),"utf-8").getBytes(info(1,2))
                                endif
                                if c_resolver! = null() then
                                    dr1! = DataRow.fromJson(str(value!))
                                else
                                    dr1! = DataRow.fromJson(str(value!)).resolveConstants(c_resolver!)
                                endif
                                ex$ = name$+"! = dr1!"
                            endif
                            execute ex$
                            if (debug) then
                                System.out.println(dr1!.toString())
                            fi
                            dr1! = null()
                        fi
                    fi
                fi
            fi
            if (debug) then
                System.out.println(ex$)
            fi
        wend
    fi


    rem execute the code

    jarray! = jobject!.getAsJsonArray("ex")
    ret! = new JsonObject()

    if jarray! <> null() then
        it! = jarray!.iterator()
        while it!.hasNext()
            j!=it!.next()
            op$=j!.get("op").getAsString()
            if op$="create" then
                cl$=j!.get("class").getAsString()
                var$=j!.get("var").getAsString()
                ex$=var$+"! = new "+cl$+"()"
                rem System.out.println(ex$)
                execute ex$
            fi

            if op$="destroy" then
                var$=j!.get("var").getAsString()
                ex$=var$+"! = null()"
                execute ex$
                if (debug) then
                    System.out.println(ex$)
                fi
            fi


            if op$="invoke" then
                method$=j!.get("method").getAsString()
                var$=j!.get("var").getAsString()

                classname$=seval("str("+var$+"!)")
                while pos(":"=classname$)>0
                    classname$=classname$(pos(":"=classname$)+1)
                wend

                dummy$=STBL("!SESSIONINFO",ses$+" - "+classname$+" :: "+method$)

                ex$=var$+"!."+method$+"("
                args! = j!.get("args")
                if args!<>null() then
                    ita! = args!.iterator()
                    i=0
                    while ita!.hasNext()
                        arg! = ita!.next()
                        if i>0 then
                            ex$=ex$+","
                        fi
                        ex$=ex$+arg!.getAsString()+"!"
                        i=i+1
                    wend
                fi
                ex$=ex$+")"
                retvar! = j!.get("retvar")
                if retvar!<>null() then
                    retvar$=retvar!.getAsString()
                    ex$=retvar$+"!="+ex$
                fi
                if (debug) then
                    System.out.println(ex$)
                fi
                execute ex$
            fi
        wend
    fi
    dummy$=STBL("!SESSIONINFO",ses$+" - return package")

    rem build return package

    jarray! = jobject!.getAsJsonArray("ret")

    use com.basiscomponents.json.ComponentsCharacterEscapes
    use com.fasterxml.jackson.core.JsonFactory
    use com.fasterxml.jackson.core.JsonGenerator
    use java.io.StringWriter

    jf! = new JsonFactory()
    jf!.setCharacterEscapes(new ComponentsCharacterEscapes())
    w! = new StringWriter()
    g! = jf!.createJsonGenerator(w!)
    g!.writeStartObject()

    if jarray! <> null() then
        it! = jarray!.iterator()
        while it!.hasNext()
            j!=it!.next()
            v$= j!.getAsString()
            ex$="var!="+v$+"!"
            execute ex$
            if var! <> null() then
                class$=var!.getClass().toString()
                if pos("HashMap" =class$)>0 then
                    var! = new com.basiscomponents.db.DataRow(var!)
                    class$=var!.getClass().toString()
                fi
                if pos("String"=class$)>0 then
                    g!.writeStringField(v$,str(var!))
                else
                    if pos("BBjNumber"=class$)>0 OR pos("Integer"=class$)>0 OR pos("Double"=class$)>0 then
                        g!.writeNumberField(V$,num(str(var!)))
                    else
                        if pos("DataRow"=class$)>0 then
                            g!.writeFieldName(v$)
                            g!.writeRawValue(var!.toJson())
                        else
                            if pos("ResultSet"=class$)>0 then
                                g!.writeFieldName(v$)
                                g!.writeRawValue(var!.toJson())
                            else
                                if pos("BBjVector"=class$)>0 then
                                    vw! = com.basiscomponents.bridge.typewrap.VectorWrap.fromBBjVector(var!)
                                    g!.writeFieldName(v$)
                                    g!.writeRawValue(vw!.toJson())
                                else
                                    if pos("Boolean"=class$)>0 then
                                        g!.writeBooleanField(v$,var!)
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        wend
    fi

    g!.writeStringField("ses",ses$)
    g!.writeStringField("tid",tid$)
    g!.writeEndObject()
    g!.close()
    response!= w!.toString()
    if (debug) then
        System.out.println("Response: " + response!)
    fi

    BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response!)
    responseSemaphore!.release()

    goto main_loop

    execerr:
        ch=unt
        open (ch,mode="O_CREATE,O_APPEND",err=notrace)"bridgeerrlog.txt"
        print (ch)date(0:"%Dz.%Mz.%Yl %Zz:%mz:%sz")
        print (ch)"!ERROR "+str(err)+" "+emsg$+" "+str(tcb(5))
        print (ch)errmes(-1)
        sw! = new java.io.StringWriter()
        pw! = new java.io.PrintWriter(sw!)
        bbjapi().getLastBBjException().printStackTrace(pw!)
        msg$ = sw!.toString()
        print (ch)msg$
        close (ch)

        notrace:
        e$=errmes(-1)
        if e$(1,4)="java" then let e$=e$(pos(":"=E$)+2)


        emsg$=org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(e$)
        response$="{""err"":"""+"!ERROR "+str(err)+" "+emsg$+" "+str(tcb(5) )+""",""message"":"""+emsg$+""",""ses"":"""+ses$+"""}"

        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response$)
        responseSemaphore!.release()

goto main_loop



class public Bridge

    method public void servletRequest(BBjServletEvent p_event!)

        debug=num(stbl("DEBUG",err=*next),err=*next)

        declare BBjHttpResponse http_resp!
        declare BBjHttpRequest http_req!
        http_req! = p_event!.getHttpRequest()
        http_resp! = p_event!.getHttpResponse()
        http_resp!.setContentType("application/json")

        declare auto BBjVector files!
        files! = http_req!.getFileUploads()
        sz = files!.size()
        if sz then
            declare BBjFileUpload uploadFile!
            System.out.println("There were " + str(sz) + " files uploaded.")
            for i=0 to sz-1
            uploadFile! = cast(BBjFileUpload,files!.get(i))
            if (debug) then
                System.out.println(str("Field:" + uploadFile!.getFieldName()))
                System.out.println(str("- Name:"+ uploadFile!.getOriginalName()))
                System.out.println(str("- Temp Name:"+ uploadFile!.getTempName()))
                System.out.println(str("- Type:"+ uploadFile!.getContentType()))
                System.out.println(str("- Size:"))
                System.out.println(str(uploadFile!.getContentLength()))
                System.out.println(str("------------------------"))
            fi

            tmpname$= uploadFile!.getTempName()
            newname!=tmpname$

            oname$=str(uploadFile!.getOriginalName())
            if oname$<>"" And oname$<>"null" then
                newname$ = newname!.replace("\","/")
                newname$=newname$(1,pos("/"=newname$,1,pos("/"=newname$,1,0)))
                newname$=newname$+str(System.currentTimeMillis())+"/"
                mkdir newname$
                newname$=newname$+uploadFile!.getOriginalName()
                rename tmpname$ TO newname$
                response!="{""upload"":["""+newname$+"""]}"
                goto send_response
            fi
        fi


        request! = http_req!.getParameter("ex")
        if request!>"" then
            ses$=http_req!.getParameter("ses")
            if ses$="" then
                jelement! = new JsonParser().parse(request!)
                jobject! = jelement!.getAsJsonObject(err=*endif)
                ses!=jobject!.get("ses")
                if ses!<>null() then
                    ses$=ses!.getAsString()
                fi
            endif
            if ses$="" then
                newSes=1
                ses$=Bridge.newSession()
            fi

            dummy$=STBL("!SESSIONINFO","waiting for "+ses$)
            response!=Bridge.invoke(ses$,request!)
            dummy$=STBL("!SESSIONINFO","")

            if len(response!)>5 and str(response!)(1,5)="file:" then
                file$=str(response!)(6)

                ch=unt
                open (ch,err=filenotfund)file$
                close (ch)
                fullPath$ = BBjAPI().getFileSystem().resolvePath(file$)
                response!=" deliver file: "+fullPath$

                http_resp!.setFile(fullPath$)
                http_resp!.setContentType("application/pdf")
                http_resp!.setHeader("Content-Disposition","inline; filename=""myFileName.PDF""")

                goto done_file
                filenotfund:
                    response!="[{""err"":"""+errmes(-1)+"""}]"
                done_file:
            else
                if len(response!)=0 or str(response!)(1,1)<>"{" then
                    response!="{""err"":"""+response!+"""}"
                fi
            fi
        else
            response!="{""err"":""no request received""}"
        fi

        send_response:

        cb$ = http_req!.getParameter("callback")

        http_resp!.setHeader("Access-Control-Allow-Origin","*")

        ch=unt
        open(ch)"JSERVLET"
        if cb$>"" then
            print(ch)cb$+"("
        fi
        print (ch)response!
        if cb$>"" then
            print(ch)");"
        fi
        close(ch)

    methodend

    method public static BBjString newSession()

        rem create a new session
        while 1
            ses$=str(java.util.UUID.randomUUID())
            print "trying to create session "+ses$
            BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST",err=*next); continue
            break
        wend



        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST","")
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE","")

        requestSemaphore! = new java.util.concurrent.Semaphore(0)
        responseSemaphore! = new java.util.concurrent.Semaphore(0)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST_SEM",requestSemaphore!)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE_SEM",responseSemaphore!)

		t$=BBjAPI().getConfig().getCurrentCommandLineObject().getTerminal()
        if t$="NIO" then let t$="IO"

        scmd$="bbj -t"+t$+" -q -c"+BBjAPI().getConfig().getCurrentCommandLineObject().getConfigFile()+" -CP"+BBjAPI().getConfig().getCurrentCommandLineObject().getOriginalClasspathName()+" -WD"+dsk("")+dir("")+" "+pgm(-1)+" - "+ses$+" &"
        rem System.out.println(scmd$)
        a=scall(scmd$)

        methodret ses$

    methodend

    method public static String invoke (BBjString ses$, BBjString instructions!)

        requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM",err=noSes)
        responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")

        BBjAPI().getGlobalNamespace().setLock(ses$+"_REQUEST",30000)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST",instructions!)
        requestSemaphore!.release()
        rem here's the remote session active

        if !responseSemaphore!.tryAcquire(1,60,java.util.concurrent.TimeUnit.SECONDS) then
            rem System.out.println("Bridge: Timeout waiting on "+ses$)
            response!="!Error - Timeout occurred"
        fi

        response! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE")
        BBjAPI().getGlobalNamespace().removeLock(ses$+"_REQUEST")

        if cvs(instructions!,4)="BYE" then
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM")
            response!="Goodbye."
        fi

        methodret response!

        noSes:
            methodret "!ERROR 11 Session invalid"

    methodend

classend

