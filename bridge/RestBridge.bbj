use java.util.HashMap
use com.basiscomponents.db.ResultSet

class public RestBridge

    METHOD PUBLIC void service(BBjspServletContext context!)

        declare BBjspWebRequest request!
        declare BBjspWebResponse response!

        request! = context!.getRequest()
        response! = context!.getResponse()

        #this!.service(request!,response!)

    METHODEND

    METHOD PUBLIC void service(BBjspWebRequest request!, BBjspWebResponse response!)

        debug = num(stbl("DEBUG",err=*next),err=*next)

        if debug then
            System.out.println("REST request --------------------------")
            System.out.println("REST request METHOD "+request!.getMethod())
            System.out.println("REST request HEADER "+request!.getRequestURL())
            System.out.println("REST request end -----------------------")
        fi

        req_id$ = #logRequest(request!)

        response!.setHeader("Access-Control-Allow-Origin",request!.getHeader("Origin"))
        response!.setHeader("Access-Control-Allow-Credentials","true")
        response!.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS")
        response!.setHeader("Access-Control-Allow-Headers",request!.getHeader("Access-Control-Request-Headers"))


        files! = request!.getFileUploads()
        System.out.println("files!")
        System.out.println(str(files!))
        System.out.println(request!.getBody())
        System.out.println(request!.getPathInfo())
        if (files!<>null()) then
            sz = files!.size()
            if sz then
              declare BBjFileUpload uploadFile!
              hm_resp! = new HashMap()
              for i=0 to sz-1
                      uploadFile! = cast(BBjFileUpload,files!.get(i))
                      if (debug) then
                          System.out.println(str("Field:" + uploadFile!.getFieldName()))
                          System.out.println(str("- Name:"+ uploadFile!.getOriginalName()))
                          System.out.println(str("- Temp Name:"+ uploadFile!.getTempName()))
                          System.out.println(str("- Type:"+ uploadFile!.getContentType()))
                          System.out.println(str("- Size:"))
                          System.out.println(str(uploadFile!.getContentLength()))
                          System.out.println(str("------------------------"))
                      fi
                      
                      tmpname$= uploadFile!.getTempName()
                      newname!=tmpname$
                      
                      oname$=str(uploadFile!.getOriginalName())
                      if oname$<>"" And oname$<>"null" then
                          newname$ = newname!.replace("\","/")
                          newname$=newname$(1,pos("/"=newname$,1,pos("/"=newname$,1,0)))
                          newname$=newname$+str(System.currentTimeMillis())+"/"
                          mkdir newname$
                          newname$=newname$+uploadFile!.getOriginalName()
                          rename tmpname$ TO newname$
                          hm_resp!.put(uploadFile!.getFieldName(),newname$)
                      fi
              next i
              
              resp$=""
              it! = hm_resp!.keySet().iterator()
              while it!.hasNext()
                    x$=it!.next()
                    x1$=hm_resp!.get(x$)
                    if resp$>"" then
                        resp$=resp$+","
                    fi
                    resp$=resp$+""""+x$+""":"""+x1$+""""
              wend
                  
              response!.getOutputStream().write("{"+resp$+"}")
              response!.setStatus(200)
              #logResponse(req_id$,response!)
              methodret     
           fi
        fi


        req! = new HashMap()

        switch request!.getMethod()
            case "GET"
                method$ = "GET"
            break
            case "OPTIONS"
                response!.setStatus(200)
                #logResponse(req_id$,response!)
                methodret
            break
            case "DELETE"
            case "PUT"
                method$ = request!.getMethod()
                rem Only JSON is supported for now
                if cvs(request!.getContentType(),8) <> "application/json" then
                    s! = response!.getOutputStream()
                    response!.sendError(415,"Unsupported media type """+request!.getContentType()+"""")
                endif
            break
            case "POST"
                method$ = "POST"
                if request!.getHeader("ExecuteBCMethod") <> null() then
                    req!.put("invoke",request!.getHeader("ExecuteBCMethod"))
                    if request!.getHeader("BCReturnVarName") <> null() then
                        req!.put("retvarname",request!.getHeader("BCReturnVarName"))
                    endif
                endif
            break
            case default
                response!.setContentType("text/plain")
                s! = response!.getOutputStream()
                response!.sendError(501,"Unsupported HTTP method """+request!.getMethod()+"""")
                #logResponse(req_id$,response!)
                methodret
            break
        swend



        test$=stbl("REST_WD",err=setup_err)
        test$=stbl("REST_ADAPTERPGM",err=setup_err)

        token$=request!.getParameter("_TOKEN")
        if token$>"" then
            auth$="Basic "+token$
        else
            auth$=str(request!.getHeader("authorization",err=*next))
        fi

        if auth$="null" or len(auth$)<8 OR auth$(1,5)<>"Basic" then
            response!.setHeader("WWW-Authenticate","Basic realm=""REST Web Service""")
            System.out.println("REST: error 401 Authentication required")
            response!.sendError(401,"Authentication required")
            #logResponse(req_id$,response!)
            methodret
        else
            auth$=auth$(7)
            uid$ = hta(java.security.MessageDigest.getInstance("MD5").digest(auth$))
        fi


        ses_list! = BBjAPI().getGlobalNamespace().getValue(uid$+"_list",err=*next)
        if ses_list! = null() then
            BBjAPI().getGlobalNamespace().setValue(uid$+"_list",new java.util.Stack())
            ses_list! = BBjAPI().getGlobalNamespace().getValue(uid$+"_list")
        endif


        while 1
            if (ses_list!.empty())
                ses$=#newSession(auth$)
                break
            else
                ses$=ses_list!.pop()
                if (#checkSession(ses$)) then
                    break
                endif
            endif
        wend

        params! = new HashMap()
        it! = request!.getParameterNames().iterator()
        while it!.hasNext()
            p$=it!.next()
            params!.put(cvs(p$,4),request!.getParameter(p$))
        wend

        uri!=request!.getPathInfo()
        if uri! <> null() and uri!.lastIndexOf("/_output_") <> -1 then
            uri! = uri!.substring(0,uri!.lastIndexOf("/_output_"))
        fi

        req!.put("method",method$)
        req!.put("uri",uri!)
        req!.put("params",params!)
        req!.put("body",request!.getBody(err=*next))
        req!.put("preferredlocales",request!.getLocales())

        answer!=#invoke(ses$,req!)
        ses_list!.push(ses$)

        accept$=str(params!.get("_ACCEPT"))
        if accept$="null" then
            accept$=str(request!.getHeader("Accept"))
        endif
        if accept$="null" then
            accept$=str(request!.getHeader("Content-Type"))
            if accept$="null" then
                accept$="text/html"
            fi
        fi

        rem check for multi-value accept headers
        atmp$=accept$
        alist!=new java.util.ArrayList()
        alist!.addAll(java.util.Arrays.asList(new String(accept$).split(",")))
        accept$ = ""
        it! = alist!.iterator()
        while it!.hasNext()
            accept$ = it!.next()
            if mask(accept$,"^debug|^text/html|^application/json|^text/csv|^text/plain|^application/xml|^*/*|^text/xml|^application/xls") then
                if pos(";"=accept$) then
                    accept$=cvs(accept$(1,pos(";"=accept$)-1),3)
                endif
                break
            endif
        wend

        if accept$ = "" then
            if debug then
                System.out.println("REST: error 406 Unsupported content type requested in Accept header: "+atmp$)
            fi
            response!.sendError(406, "Unsupported content type requested in Accept header: "+atmp$)
            #logResponse(req_id$,response!)
            methodret
        fi

        if debug then
            System.out.println("REST Accept: "+accept$)
        fi

        statuscode! = answer!.get("statuscode",err=*next)
        errormsg! = answer!.get("errormsg",err=*next)
        errorcode$ = str(answer!.get("errorcode"))
            

        
        if answer!.containsKey("file") then
            file$ = answer!.get("file")
            
            tryagain:
            
            ch=unt
            open (ch,err=filenotfund)file$
            close (ch)
            System.out.println(file$)
            fullPath$ = BBjAPI().getFileSystem().resolvePath(file$)
            System.out.println(fullPath$)

            filename$=fullPath$
            if (pos("/"=filename$)>0) then 
                filename$=filename$(pos("/"=filename$,1,pos("/"=filename$,1,0))+1)
            fi
            if (pos("\"=filename$)>0) then 
                filename$=filename$(pos("\"=filename$,1,pos("\"=filename$,1,0))+1)
            fi
            
            ext$="dat"
            
            if pos("."=filename$)>0 then
                ext$=filename$(pos("."=filename$,1,pos("."=filename$,1,0))+1)
            fi
            
            f! = new java.io.File(fullPath$)
            java.nio.file.Files.copy(f!.toPath(), response!.getOutputStream())
            
            response!.setContentType("application/"+ext$)
            response!.setHeader("Content-Disposition","inline; filename="""+filename$+"""")

            goto done_file
            filenotfund:
            
            if info(3,4)="DEVPR01" and file$<>"D:\tmp\demo.pdf"then
                file$="D:\tmp\demo.pdf"
                goto tryagain
            fi
            
            System.out.println("not found")

            response!.getOutputStream().write("file not found!")
            response!.setStatus(404)
                
            done_file:
            #logResponse(req_id$,response!)
            methodret 
            
            
        endif 
        
        if answer!.containsKey("stacktrace") then
            stacktrace$ = answer!.get("stacktrace")
        endif

        if statuscode! <> null() and !mask(statuscode!,"20\d") then
            rem System.out.println("REST: error "+str(statuscode!)+" - "+str(errormsg!))
            if pos("application/json"=accept$) > 0 then
                response!.setStatus(num(statuscode!))
                response!.setContentType("application/json")
                e$ = "{""code"":"""+str(errorcode$)+""",""message"":"""+org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(errormsg!)+""","
                if debug and statuscode! <> "401" then
                    e$ = e$ + """stacktrace"":"""+org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(stacktrace$)+""","
                endif
                e$ = e$ + """ses"":"""+ses$+"""}"
                response!.getOutputStream().write(e$)
            else
                response!.setContentType("text/html")
                s! = response!.getOutputStream()
                s!.write("<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""/><title>"+str(errormsg!)+"</title></head>")
                s!.write("<body><h2>HTTP ERROR "+str(statuscode!)+"</h2><p>Problem accessing "+request!.getRequestURI()+". Reason:<hr><blockquote><pre>!ERROR="+errorcode$+" "+str(errormsg!))
                if debug and statuscode! <> "401" then
                    s!.write($0a$+stacktrace$)
                endif
                s!.write("</pre></blockquote><hr></p></body></html>")
                response!.setStatus(num(statuscode!))
            endif
            rem ToDo: add error output for xml and csv
            #logResponse(req_id$,response!)
            methodret
        fi


        rs! = answer!.get("resultset",err=*next)
        pk! = answer!.get("primarykey",err=*next)
        if rs! = null()
            s! = response!.getOutputStream()
            s!.write(str(answer!))
            response!.setHeader("Reason-Phrase",str(errormsg!))
            System.out.println("REST: error 500 "+str(errormsg!))
            response!.sendError(500,str(errormsg!))
            #logResponse(req_id$,response!)
            methodret
        fi

        if method$ = "PUT" or method$ = "DELETE" then
            response!.setStatus(num(statuscode!))
            #logResponse(req_id$,response!)
            methodret
        endif

        if method$ = "POST" then
            if statuscode! <> null() then
                response!.setStatus(num(statuscode!))
            endif
            if str(rs!) = "" then
                #logResponse(req_id$,response!)
                methodret
            endif
        endif


        if pos("text/html"=accept$) > 0 OR pos("*/*"=accept$) > 0  then
            if rs!.size() then
                custom_css! = rs!.get(0).getAttribute("CUSTOM_CSS")
            endif
            response!.setContentType("text/html; charset="+info(1,2))
            s! = response!.getOutputStream()

            if custom_css! <> null() then
                s!.write("<html><head><style>table, th, td {padding:5px;border: 1px solid black;} "+str(custom_css!)+"</style></head><body>")
            else
                s!.write("<html><head><style>table, th, td {padding:5px;border: 1px solid black;}</style></head><body>")
            endif

            single = answer!.get("single",err=*next)
            if single>0 AND rs!.size()=1 then
                rem TODO move this pivoted display into the writer
                rec! = rs!.get(0)
                it! = rec!.getFieldNames().iterator()
                s!.write("<table>")
                if request!.getPathInfo().endsWith("/_meta") then
                    attrSet! = new java.util.HashSet()
                    while it!.hasNext()
                        f$ = it!.next()
                        attrSet!.addAll(rs!.getColumnMetaData(f$).keySet())
                    wend
                    it! = attrSet!.iterator()
                    s!.write("<tr><td></td>")
                    while it!.hasNext()
                        metaName$ = it!.next()
                        s!.write("<td><b>"+metaName$+"</b></td>")
                    wend
                    s!.write("</tr>")
                    it! = rec!.getFieldNames().iterator()
                    while it!.hasNext()
                        f$ = it!.next()
                        metaMap! = rs!.getColumnMetaData(f$)
                        s!.write("<tr><td><b>"+f$+"</b></td>")
                        it2! = attrSet!.iterator()
                        while it2!.hasNext()
                            metaName$ = it2!.next()
                            if metaMap!.containsKey(metaName$) then
                                s!.write("<td>"+str(metaMap!.get(metaName$))+"</td>")
                            else
                                s!.write("<td></td>")
                            endif
                        wend
                        s!.write("</tr>")
                    wend
                else
                    while it!.hasNext()
                        f$=it!.next()
                        s!.write("<tr><td><b>"+f$+"</b></td><td>"+rec!.getFieldAsString(f$)+"</td></tr>")
                    wend
                endif
                s!.write("</table>")
            else
                if (pk! <> null() ) then
                    pk$=str(pk!)
                    links! = new java.util.HashMap()
                    link$ = request!.getContextPath()+request!.getServletPath()+request!.getPathInfo().replaceAll("(/[^/]+)/.*|$","$1")

                    while pk$>""
                        if pos("/"=pk$)>0 then
                            f$=pk$(1,pos("/"=pk$)-1)
                            pk$=pk$(pos("/"=pk$)+1)
                        else
                            f$=pk$
                            pk$=""
                        fi
                        link$=link$+"/{"+f$+"}"
                        links!.put(f$,link$)
                    wend
                else
                    links! = null()
                fi
                wr! = new java.io.StringWriter()

                com.basiscomponents.db.ResultSetExporter.writeHTML(rs!,wr!,links!)
                wr!.flush()
                wr!.close()
                s!.write(wr!.toString())
            fi
            s!.write("</body></html>")

            System.out.println("REST: 200 - sent answer text/html")

            response!.setStatus(200)
            #logResponse(req_id$,response!)
            methodret
        else
            if pos("text/xml"=accept$) >0 or pos("application/xml"=accept$) >0  then
                if pos("application/xml"=accept$) >0  then
                    response!.setContentType("application/xml")
                else
                    response!.setContentType("text/xml")
                endif
                wr! = new java.io.StringWriter()
                com.basiscomponents.db.ResultSetExporter.writeXML(rs!,"root","entity",wr!)
                s! = response!.getOutputStream()

                wr!.flush()
                wr!.close()
                s!.write(wr!.toString())
                #logResponse(req_id$,response!)
                methodret
            else
                if pos("application/json"=accept$) >0  then
                    response!.setContentType("application/json")
                    wr! = new java.io.StringWriter()
                    com.basiscomponents.db.ResultSetExporter.writeJSON(rs!,wr!)
                    s! = response!.getOutputStream()

                    wr!.flush()
                    wr!.close()
                    s!.write(wr!.toString())
                    #logResponse(req_id$,response!)
                    methodret
                else
                    if pos("text/csv"=accept$) >0 OR pos("text/plain"=accept$) >0 then
                        response!.setContentType("text/csv")
                        wr! = new java.io.StringWriter()
                        com.basiscomponents.db.ResultSetExporter.writeTXT(rs!,wr!)
                        s! = response!.getOutputStream()

                        wr!.flush()
                        wr!.close()
                        s!.write(wr!.toString())
                        #logResponse(req_id$,response!)
                        methodret
                    else
                        if pos("application/xls"=accept$) >0 then
                            response!.setContentType("application/xls")
                            if request!.getPathInfo().matches("/[^/]+/_output_/([^/]+)$") then
                                filename$ = request!.getPathInfo().replaceAll("/[^/]+/_output_/([^/]+)$","$1")
                            else
                                filename$ = request!.getPathInfo().replaceAll("/([^/]+).*","$1")+".xlsx"""
                            endif
                            rem System.out.println(filename$)
                            response!.setHeader("content-disposition","attachment; filename="""+filename$+"""")
                            d$=System.getProperty("basis.cacheDirectory")+"/_output_/"
                            mkdir d$,err=*next

                            wr! = new java.io.StringWriter()
                            f! = java.io.File.createTempFile("output_", "xls", new java.io.File(d$))
                            com.basiscomponents.db.ResultSetExporter.writeXLSX(rs!, f!, 1)

                            if debug then
                                System.out.println("REST: WRITING Excel to "+d$)
                                System.out.println(f!.getAbsolutePath())
                                System.out.println(str(rs!.size())+" Records written")
                            fi

                            java.nio.file.Files.copy(f!.toPath(), response!.getOutputStream())
                            f!.delete()
                            #logResponse(req_id$,response!)
                            methodret
                        else
                            if pos("debug"=accept$)>0 then
                                response!.setContentType("text/plain")
                                s! = response!.getOutputStream()
                                s!.write(str(req!))
                                s!.write($0a$)

                                s!.write(str(answer!))
                                s!.write($0a$)
                                s!.write("Debug: ")
                                s!.write($0a$)
                                s!.write("getAttributeNames:"+str(request!.getAttributeNames()))
                                s!.write($0a$)
                                s!.write("getHeaderNames:"+str(request!.getHeaderNames()))
                                s!.write($0a$)
                                s!.write("getParameterNames:"+str(request!.getParameterNames()))
                                s!.write($0a$)
                                s!.write("getMethod:"+str(request!.getMethod()))
                                s!.write($0a$)
                                s!.write("getRequestURL:"+str(request!.getRequestURL()))
                                s!.write($0a$)
                                s!.write("getRequestURI:"+str(request!.getRequestURI()))
                                s!.write($0a$)
                                s!.write("Accept:"+str(request!.getHeader("Accept")))
                                s!.write($0a$)
                                #logResponse(req_id$,response!)

                                methodret
                            else
                                if debug then
                                    System.out.println("REST: error 406 Unsupported content type requested in Accept header: "+accept$)
                                fi
                                response!.sendError(406, "Unsupported content type requested in Accept header: "+accept$)
                                #logResponse(req_id$,response!)
                                methodret
                            fi
                        fi
                    fi
                fi
            fi
        fi
        #logResponse(req_id$,response!)
        methodret


        setup_err:
            response!.setContentType("text/plain")
            s! = response!.getOutputStream()
            s!.write("stbl not set up correctly!")
            System.out.println("REST: error 500 STBLs not set up correctly! Need REST_WD and REST_ADAPTERPGM in config.bbx" )
            response!.sendError(500,"STBLs not set up correctly! Need REST_WD and REST_ADAPTERPGM in config.bbx" )
            #logResponse(req_id$,response!)
    METHODEND


    method private Boolean checkSession(BBjString ses$)

        requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM",err=noSes)
        responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")

        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST","PING")

        requestSemaphore!.release()
        if !responseSemaphore!.tryAcquire(1,1,java.util.concurrent.TimeUnit.SECONDS) then
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM")
            methodret Boolean.FALSE
        fi

        methodret Boolean.TRUE


        noSes:
            methodret Boolean.FALSE

    methodend


    method public static BBjString newSession(BBjString auth$)

        rem create a new session
        while 1
            ses$=str(java.util.UUID.randomUUID())
            print "trying to create session "+ses$
            BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST",err=*next); continue
            break
        wend
        System.out.println("REST: create "+ses$)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST","")
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE","")

        requestSemaphore! = new java.util.concurrent.Semaphore(0)
        responseSemaphore! = new java.util.concurrent.Semaphore(0)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST_SEM",requestSemaphore!)
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE_SEM",responseSemaphore!)

        cp$=BBjAPI().getConfig().getCurrentCommandLineObject().getOriginalClasspathName()
        if cp$>"" cp$=" -CP"+cp$
        wd$=" -WD"+stbl("REST_WD")
        pgm$=" "+stbl("REST_ADAPTERPGM")


        cfg$=" -c"+BBjAPI().getConfig().getCurrentCommandLineObject().getConfigFile()
        t$=" -t"+BBjAPI().getConfig().getCurrentCommandLineObject().getTerminal()
        t$=" -t"+stbl("REST_ADAPTERTERM",err=*next)

        scmd$="bbj  -q "+t$+cfg$+cp$+wd$+pgm$+" - "+ses$+" "+auth$+" &"
        System.out.println("REST: create "+scmd$)
        a=scall(scmd$)

        methodret ses$

    methodend


    method public static HashMap invoke(BBjString ses$, HashMap instructions!)

        System.out.println("REST: invoke "+ses$)
        requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM",err=noSes)
        responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")

        BBjAPI().getGlobalNamespace().setValue(ses$+"_REQUEST",instructions!)
        requestSemaphore!.release()
        rem here's the remote session active

        if !responseSemaphore!.tryAcquire(1,60,java.util.concurrent.TimeUnit.SECONDS) then
            rem System.out.println("Bridge: Timeout waiting on "+ses$)
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM")
            BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM")
            System.out.println("REST: timeout on invoke "+ses$)
            throw "Timeout occurred",0
        fi

        response! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE",err=*next)

        System.out.println("REST: invoke done "+ses$)
        methodret response!


        noSes:
            throw  "Session invalid",11

    methodend

    method private BBjString logRequest(BBjspWebRequest request!)
        
        rlog$=stbl("REST_REQUESTLOG",err=skip)
        System.out.println("Logging request into "+rlog$)
        id$=""

        ch=unt
        open (ch)rlog$ 
        
        tpl$="ID:C(16*),METHOD:C(1*),START:N(1*),END:N(1*),DURATION:N(1*),ADDR:C(1*),URL:C(1*),URI:C(1*),QUERY:C(1*),HEADERS:C(1*),PARAMS:C(1*),STATUS:C(1*)"
        
        dim log$:tpl$
        
        id$=str(System.currentTimeMillis())+"_"+str(dec(INFO(3,0)))
        
        log.id$=id$
        log.METHOD$=request!.getMethod()
        log.START=System.currentTimeMillis()
        log.ADDR$=request!.getRemoteAddr()
        log.URI$=request!.getRequestURI()
        log.URL$=request!.getRequestURL()
        log.QUERY$=request!.getQueryString()
        
        h! = request!.getHeaderNames()
        it! =h!.iterator()
        while it!.hasNext()
            hn$=it!.next()
            h$=h$+hn$+"="+request!.getHeader(hn$)+","
        wend
        log.HEADERS$=h$
        
        p! = request!.getParameterNames()
        it! =p!.iterator()
        while it!.hasNext()
            pn$=it!.next()
            p$=p$+pn$+"="+request!.getParameter(pn$)+","
        wend
        log.PARAMS$=p$
        
        write record (ch)log$
        
        close (ch)
        
        skip:
        
        methodret id$
    
    methodend
    
    method private void logResponse(BBjString id$, BBjspWebResponse response!)
        
        rlog$=stbl("REST_REQUESTLOG",err=skip)
        
        if id$="" then
            methodret
        fi
        
        ch=unt
        open (ch,err=skip)rlog$ 
        
        tpl$="ID:C(16*),METHOD:C(1*),START:N(1*),END:N(1*),DURATION:N(1*),ADDR:C(1*),URL:C(1*),URI:C(1*),QUERY:C(1*),HEADERS:C(1*),PARAMS:C(1*),STATUS:C(1*)"
        dim log$:tpl$
        
        read record (ch,dom=skip,key=id$)log$
        log.END=System.currentTimeMillis()
        log.DURATION = log.END-log.START
        
        log.STATUS$=STR(response!.getStatus())
        
        write record (ch)log$
    
        close (ch)
        
        skip:
            
    methodend

classend
