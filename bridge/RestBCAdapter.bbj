use java.util.HashMap
use com.basiscomponents.db.ResultSet

seterr execerr

System.out.println("REST: new reomte session ")
BBjAPI().getConfig().setOptionSetting("ERROR_UNWINDS", 1)

ses$ = argv(1)
auth$ = argv(2)
System.out.println("DIR: ")
System.out.println(stbl("REST_WD"))

chdir stbl("REST_WD")
System.out.println("DIR: "+stbl("REST_WD"))
call "bridge/prepSession.bbj",err=*next
ses$=stbl("SESSIONID",ses$)


auth$=java.util.Base64.getDecoder().decode(auth$)

System.out.println(auth$)

user$=auth$(1,pos(":"=auth$)-1)
password$=auth$(pos(":"=auth$)+1)

requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM")
responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")

if user$<>"admin" then
    throw "Wrong username and/or password",999
fi

REM ses! = new ::api/SessionsBC::SessionsBC()
REM 
REM if user$="_token" then
REM     System.out.println("REST Login token "+password$)
REM     ses!.loginSession(password$)
REM     ses!.login(password$,"BWP",err=*next); goto done_login
REM     ses!.login(password$,"CPO")
REM else
REM     System.out.println("REST Login user "+user$)
REM     a! = ses!.loginSession(user$,password$,"en")
REM     ses!.login(a!,"BWP",err=*next); goto done_login
REM     ses!.login(a!,"CPO")
REM fi

done_login:


authenticated=1

timeout=60
timeout=int(num(stbl("REST_TIMEOUT",err=*next),err=*next))

main_loop:

    CLEAR EXCEPT user$,password$, ses$, requestSemaphore!, responseSemaphore!, ses!, authenticated, timeout

    seterr execerr

    dummy$=STBL("!SESSIONINFO",ses$+" - idle "+str(usecount))

    rem requestSemaphore!.acquire()
    if !requestSemaphore!.tryAcquire(1,timeout,java.util.concurrent.TimeUnit.SECONDS) then
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM")
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM")
        release
    fi

    request!=BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST")
    if (str(request!) = "PING") then
        System.out.println("REST: reomte session PING "+ses$)
        responseSemaphore!.release()
        goto main_loop
    fi

    System.out.println("REST: remote session running "+ses$)
    dummy$=STBL("!SESSIONINFO",ses$+" - working "+str(request!))

    uri$=request!.get("uri")
    uri$=uri$(2)
    if pos("/"=uri$)>0
        bc$=uri$(1,pos("/"=uri$)-1)
        uri$=uri$(pos("/"=uri$)+1)
        sel$=uri$
    else
        bc$=uri$
        sel$=""
    fi


    System.out.println("REST ADAPTER Selected: "+sel$)


    prefix$ = stbl("REST_PGM_PREFIX",err=*next)
    suffix$ = stbl("REST_PGM_SUFFIX",err=*next)

    bc$=bc$+"BC"
    bc! = eval("new ::"+prefix$+bc$+suffix$+"::"+bc$+"()")

    response! = new HashMap()
    params! = new HashMap()

    params! = request!.get("params",err=*next)
    filterf$=""

    ar! = bc!.getAttributesRecord()

    it! = ar!.getFieldNames().iterator()
    while it!.hasNext()
        f$=it!.next()
        if ar!.getFieldAttribute(f$,"EDITABLE")="2" then
            filterf$=filterf$+f$+"/"
        fi
    wend
    if filterf$ > "" then
        filterf$ = filterf$(1,len(filterf$)-1)
    endif


    System.out.println("REST ADAPTER filter fields: "+filterf$)

    if (sel$>"") then
        response!.put("single",1)

        if filterf$>"" then
            filter! = new com.basiscomponents.db.DataRow()

            tmp$=filterf$
            tmpsel$ = sel$
            while tmp$>"" and tmpsel$>""
                if pos("/"=tmp$)>0 then
                    f$=tmp$(1,pos("/"=tmp$)-1)
                    tmp$=tmp$(pos("/"=tmp$)+1)
                else
                    f$=tmp$
                    tmp$=""
                fi
                if pos("/"=tmpsel$)>0 then
                    tmpf$=tmpsel$(1,pos("/"=tmpsel$)-1)
                    tmpsel$=tmpsel$(pos("/"=tmpsel$)+1)
                else
                    tmpf$=tmpsel$
                    tmpsel$=""
                fi
                filter!.setFieldValue(f$,tmpf$)
            wend

            rem add all other filter fields
            if params! <> null() and params!.size() > 0 then
                it! = params!.keySet().iterator()
                while it!.hasNext()
                    P$=it!.next()
                    pv$=params!.get(p$)
                    if (p$(1,1)<>"_") then
                        filter!.setFieldValue(p$,pv$)
                    fi
                wend
             fi

            System.out.println("REST ADAPTER: filter "+str(filter!))

            response!.put("linkfield",filterf$)
            bc!.setFilter(filter!)
        else
            statuscode=500
            msg$="no filter?"
            goto error_out
        fi
    else
        if params! <> null() and params!.size() >0 then
            filter! = new com.basiscomponents.db.DataRow()
            it! = params!.keySet().iterator()
            while it!.hasNext()
                P$=it!.next()
                pv$=params!.get(p$)
                if (p$="_FULLTEXT")
                    filter!.setFieldValue("%SEARCH",pv$)
                else
                    if (p$(1,1)<>"_") then
                        filter!.setFieldValue(p$,pv$)
                    fi
                fi
            wend
            if filter!.getColumnCount() then
                bc!.setFilter(filter!)
                System.out.println("filtering :"+str(filter!))
            endif
        fi

        response!.put("single",0)
    fi

    fieldsel!=params!.get("_FIELDSEL",err=*next)
    if (fieldsel! <> null())
        bc!.setFieldSelection(new BBjVector(java.util.Arrays.asList(fieldsel!.split(","))))
    fi

    scope!=params!.get("_SCOPE")
    if scope! <> null() then
        bc!.setScope(scope!)
    endif

    first% = 0
    last% = 0
    limitSearch = 0

    if params! <> null() then
        if params!.containsKey("_PAGE") or params!.containsKey("_PER_PAGE") then
            page = 1
            page = num(params!.get("_PAGE"),err=*next)
            if page < 1 then
                throw "Invalid value for _PAGE parameter: must be greater than 0",999
            endif
            perPage = num(params!.get("_PER_PAGE"),err=*next)
            if perPage < 1 then
                throw "Invalid value for _PER_PAGE parameter: must be greater than 0",999
            endif

            first% = (int(page)-1)*int(perPage)
            last% = first%+int(perPage)-1
            limitSearch = 1
        endif

        if params!.containsKey("_OFFSET") then
            offset = num(params!.get("_OFFSET"))
            if offset < 0 then
                throw "Invalid parameter for _OFFSET parameter: must be greater than or equals 0",999
            endif
            limit = 20
            if params!.containsKey("_LIMIT") then
                limit = num(params!.get("_LIMIT"))
            endif
            if limit < 1 then
                throw "Invalid parameter for _LIMIT parameter: must be greater than 0",999
            endif

            first% = int(offset)
            last% = first% + int(limit)-1
            limitSearch = 1
        endif
    endif

    if limitSearch then
        rs! = bc!.retrieve(first%,last%)
    else
        rs! = bc!.retrieve(err=execerr)
    endif


    response!.put("resultset",rs!)
    response!.put("info",dummy$+" - " +str(usecount))
    response!.put("request",str(request!))
    response!.put("BC",bc$)
    response!.put("sel",sel$)
    response!.put("primarykey",filterf$)
    usecount=usecount+1


    BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response!)
    responseSemaphore!.release()
    System.out.println("REST: reomte session done "+ses$)
    goto main_loop

    execerr:
        sw! = new java.io.StringWriter()
        pw! = new java.io.PrintWriter(sw!)
        bbjapi().getLastBBjException().printStackTrace(pw!)
        msg$ = sw!.toString()

        ch=unt
        open (ch,mode="O_CREATE,O_APPEND",err=notrace)"bridgeerrlog.txt"
        print (ch)date(0:"%Dz.%Mz.%Yl %Zz:%mz:%sz")
        print (ch)"!ERROR "+str(err)+" "+emsg$+" "+str(tcb(5))
        print (ch)errmes(-1)

        print (ch)msg$
        close (ch)

        notrace:

        e$=errmes(-1)
        if e$(1,4)="java" then let e$=e$(pos(":"=E$)+2)


        emsg$=org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(e$)

        error_out:
        if statuscode=0
            statuscode=500
        fi

        response! = new HashMap()

        if authenticated>0 then
            response!.put("statuscode",statuscode)
        else
            response!.put("statuscode",401)
        fi
        response!.put("msg",e$)


        response!.put("err","{""err"":"""+"!ERROR "+str(err)+" "+emsg$+" "+str(tcb(5) )+""",""message"":"""+msg$+""",""ses"":"""+ses$+"""}")

        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response!)
        responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")
        responseSemaphore!.release()


        wait 10; rem FIN_WAIT

        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST",err=*next)
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE",err=*next)
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_REQUEST_SEM",err=*next)
        BBjAPI().getGlobalNamespace().removeValue(ses$+"_RESPONSE_SEM",err=*next)
release

