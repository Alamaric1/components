use com.basiscomponents.ui.layout.BBMigPane
use net.miginfocom.layout.PlatformDefaults

use java.util.HashMap
use java.util.Iterator

new bbmigtest()
release

class public bbmigtest
    field private BBjAPI    API! = BBjAPI()
    field private BBjNumber TRUE = BBjAPI().TRUE
    field private BBjNumber FALSE = BBjAPI().FALSE
    field private BBjSysGui SysGui! = #API!.openSysGui("X0")

    field private BBjTopLevelWindow Window!
    field private BBMigPane Layout!
    field private BBjChildWindow cWindow!
    field private BBMigPane cLayout!

    field private BBjStaticText lFirstName!

    field public BBjNumber ActiveResize

    method public bbmigtest()

        rem test platforms (NOTE: setting this sticks til reset or JVM re-started)
        rem PlatformDefaults.setPlatform(PlatformDefaults.WINDOWS_XP)
        rem PlatformDefaults.setPlatform(PlatformDefaults.MAC_OSX)
        rem PlatformDefaults.setPlatform(PlatformDefaults.GNOME)
        print "Platform=",
        switch PlatformDefaults.getPlatform()
            case PlatformDefaults.WINDOWS_XP
                print "Windows",
                break
            case PlatformDefaults.MAC_OSX
                print "Mac OS X",
                break
            case PlatformDefaults.GNOME
                print "Gnome",
                break
            case default
                print "Unknown",
        swend
        print " (real os=",System.getProperty("os.name"),")"
       
        #constructForm()
        #show()
    methodend

    method public void show()
        #Window!.setCallback(#Window!.ON_CLOSE, #this!, "closeWindow")
        #Window!.setCallback(#Window!.ON_RESIZE, #this!, "windowResize")
        #Window!.setCallback(#Window!.ON_SCREEN_RESIZE, #this!, "screenResize")
        #Window!.setCallback(#Window!.ON_MOUSE_SCROLL, #this!, "mouseScroll")
        #cWindow!.setCallback(#cWindow!.ON_MOUSE_SCROLL, #this!, "mouseScroll")
        #resizeTimerEvent(null())
        #Window!.setVisible(#TRUE)
        #Window!.focus()
        process_events
    methodend

    method public void closeWindow(BBjCloseEvent ev!)
        release
    methodend

    method public void windowResize(BBjResizeEvent p_event!)
        if !(#ActiveResize)
            #ActiveResize = #TRUE
            #API!.createTimer("ResizeEventTimer", .2, #this!, "resizeTimerEvent")
        endif
    methodend

    method public void screenResize(BBjScreenResizeEvent p_event!)
        if !(#ActiveResize)
            #ActiveResize = #TRUE
            #API!.createTimer("ResizeEventTimer", .2, #this!, "resizeTimerEvent")
        endif
    methodend

    method public void resizeTimerEvent(BBjTimerEvent p_event!)
        #Layout!.layoutChildren()
        #cLayout!.layoutChildren()
        #API!.removeTimer("ResizeEventTimer",err=*next)
        #ActiveResize = #FALSE
    methodend

    method public void mouseScroll(BBjScrollWheelEvent p_event!)
        if p_event!.isControlDown() or p_event!.isCmdDown() then
            scale = num(cast(HashMap, #Window!.getUserData()).get("scale"))
            if p_event!.getScrollDirection() then
                scale = scale + (p_event!.getWheelRotation() / 10)
            else
                scale = scale - (p_event!.getWheelRotation() / 10)
            endif
            if scale >= 0.5 and scale <= 3.0 then
                #SysGui!.setRepaintEnabled(0)
                #Layout!.scaleLayout(scale)
                #scaleFonts(#Window!,scale)
                #resizeTimerEvent(null())
                #SysGui!.setRepaintEnabled(1)
                cast(HashMap, #Window!.getUserData()).put("scale", scale)
            endif
        endif
    methodend

    method public void scaleFonts(BBjWindow window!, BBjNumber scale)
        declare BBjFont f!
        declare BBjVector v!
        declare Iterator iter!
        declare BBjControl c!

        rem first the window itself
        sz = 0
        sz = num(cast(HashMap, window!.getUserData(),err=*next).get("prefFontSize",err=*next))
        if sz > 0 then
            sz = int(sz * scale)
            f! = window!.getFont()
            window!.setFont( #SysGui!.makeFont(f!.getName(), sz, f!.getStyle()) )
        endif
        rem then its controls
        v! = window!.getAllControls()
        iter! = v!.iterator()
        while iter!.hasNext()
            c! = cast(BBjControl, iter!.next())
            if c!.getControlType() = #SysGui!.CHILD_TYPE then
                #this!.scaleFonts(cast(BBjWindow, c!), scale)
                continue
            endif
            sz = 0
            sz = num(cast(HashMap, c!.getUserData(),err=*continue).get("prefFontSize",err=*continue))
            if sz > 0 then
                sz = int(sz * scale)
                f! = c!.getFont()
                c!.setFont( #SysGui!.makeFont(f!.getName(), sz, f!.getStyle()) )
            endif
        wend
    methodend

    method public void constructForm()
        WinFlags$=$00000000$
        WinFlags$=IOR(WinFlags$,$00000001$); rem Allows the window to be resized.
        WinFlags$=IOR(WinFlags$,$00000002$); rem Includes a close box with the window.
        rem WinFlags$=IOR(WinFlags$,$00000004$); rem Causes a horizontal scroll bar to appear if the window contents are not scaled, or the window is resized so that the entire contents are not displayed.
        rem WinFlags$=IOR(WinFlags$,$00000008$); rem Causes a vertical scroll bar to appear if the window contents are not scaled, or the window is resized so that the entire contents are not displayed.
        WinFlags$=IOR(WinFlags$,$00000010$); rem Allows the window to be initially invisible.
        rem WinFlags$=IOR(WinFlags$,$00000020$); rem Allows the window to be initially disabled.
        WinFlags$=IOR(WinFlags$,$00000080$); rem Allows the window to be maximized or minimized.
        rem WinFlags$=IOR(WinFlags$,$00000100$); rem Sets the window to be initially minimized.
        rem WinFlags$=IOR(WinFlags$,$00000800$); rem Include menu bar. Creates a menu bar.
        rem WinFlags$=IOR(WinFlags$,$00001000$); rem Sets the window to be initially maximized.
        rem WinFlags$=IOR(WinFlags$,$00002000$); rem Prevents the separator line between the menu and client area of a window from being drawn.
        WinFlags$=IOR(WinFlags$,$00010000$); rem Activates keyboard navigation in the window. If this flag is specified, key pressed ("t") events for arrow keys and the tab key will not be reported.
        rem WinFlags$=IOR(WinFlags$,$00020000$); rem Always positions the window on top of other windows.
        rem WinFlags$=IOR(WinFlags$,$00040000$); rem Creates a border around the dialog.
        WinFlags$=IOR(WinFlags$,$00080000$); rem Sets the window to behave as a dialog.
        rem WinFlags$=IOR(WinFlags$,$00100000$); rem Automatically arranges all controls and child windows placed in the window to fit.
        WinFlags$=IOR(WinFlags$,$00400000$); rem Allows use of a custom color palette. This provides a more accurate display of colors in bitmapped images.
        WinFlags$=IOR(WinFlags$,$00800000$); rem Sets the <Enter> key to behave as a <Tab> key.
        rem WinFlags$=IOR(WinFlags$,$01000000$); rem Creates the window without a title bar.
        WinFlags$=IOR(WinFlags$,$04000000$); rem Sets the window to automatically manage SYSCOLOR events.
        rem WinFlags$=IOR(WinFlags$,$20000000$); rem Causes Visual PRO/5 to report the mouse's right button down event.
        rem WinFlags$=IOR(WinFlags$,$40000000$); rem Sets the window to be group-modal within an MDI group.
        #Window! = #SysGui!.addWindow(500,500,500,500,"BBMigPane Layout Test",WinFlags$)
        #Window!.setName("window")
        #Window!.setUserData(new HashMap())
        cast(HashMap, #Window!.getUserData()).put("scale",1.0)

        declare BBjFont font!
        font_size=12
        font! = #SysGui!.makeFont("Dialog",font_size,#SysGui!.PLAIN)
        font_height=iff(font!.getStyle()=#SysGui!.BOLD,int(font_size*1.1),font_size)

        #Window!.setFont(font!); cast(HashMap, #Window!.getUserData()).put("prefFontSize",font!.getSize())

        #Layout! = new BBMigPane(#Window!, "insets dialog,fillx", "[align label]rel[grow,fill]unrel[align label]rel[grow,fill]", "")

        declare BBjVector tx!
        declare BBjVector tm!

        tx! = #API!.makeVector()
        tidFirstName = 0; tx!.add(tidFirstName, "First Name")
        tidSurname = 1; tx!.add(tidSurname, "Surname")
        tidAddress = 2; tx!.add(tidAddress, "Address")
        tidOk = 3; tx!.add(tidOk, "OK")
        tidCancel = 4; tx!.add(tidCancel, "Cancel")
        tidHelp = 5; tx!.add(tidHelp, "Help")
        tidHelp2 = 6; tx!.add(tidHelp2, "Second Help")
        tm! = #SysGui!.getMeasures(tx!)

        declare BBjColor bcolor!
        bcolor! = #API!.makeColor(#SysGui!.LTGRAY)

        lwpad=0,lhpad=12,iwpad=12,ihpad=12; rem label width/height padding, input control width/height padding

        #lFirstName! =  #Window!.addStaticText(#Window!.getAvailableControlID(),0,0,num(tm!.get(tidFirstName))+lwpad,font_height+lhpad,str(tx!.get(tidFirstName)))
        #lFirstName!.setName("lFirstName")
        #lFirstName!.setUserData(new HashMap())
        #lFirstName!.setFont(font!); cast(HashMap, #lFirstName!.getUserData()).put("prefFontSize",font!.getSize())
        #lFirstName!.setBackColor(bcolor!)
        #Layout!.add( #lFirstName!, "" )

        declare BBjInputE iFirstName!
        iFirstName! = #Window!.addInputE(#Window!.getAvailableControlID(),0,0,100,font_height+ihpad,"")
        iFirstName!.setName("iFirstName")
        iFirstName!.setUserData(new HashMap())
        iFirstName!.setFont(font!); cast(HashMap, iFirstName!.getUserData()).put("prefFontSize",font!.getSize())
        #Layout!.add( iFirstName!, "" )

        declare BBjStaticText lSurname!
        lSurname! = #Window!.addStaticText(#Window!.getAvailableControlID(),0,0,num(tm!.get(tidSurName))+lwpad,font_height+lhpad,str(tx!.get(tidSurName)))
        lSurname!.setName("lSurname")
        lSurname!.setUserData(new HashMap())
        lSurname!.setFont(font!); cast(HashMap, lSurname!.getUserData()).put("prefFontSize",font!.getSize())
        lSurname!.setBackColor(bcolor!)
        #Layout!.add( lSurname!, "" )

        declare BBjInputE iSurname!
        iSurname! = #Window!.addInputE(#Window!.getAvailableControlID(),0,0,100,font_height+ihpad,"")
        iSurname!.setName("iSurname")
        iSurname!.setUserData(new HashMap())
        iSurname!.setFont(font!); cast(HashMap, iSurname!.getUserData()).put("prefFontSize",font!.getSize())
        #Layout!.add( iSurname!, "wrap" )

        declare BBjStaticText lAddress!
        lAddress! = #Window!.addStaticText(#Window!.getAvailableControlID(),0,0,num(tm!.get(tidAddress))+lwpad,font_height+lhpad,str(tx!.get(tidAddress)))
        lAddress!.setName("lAddress")
        lAddress!.setUserData(new HashMap())
        lAddress!.setFont(font!); cast(HashMap, lAddress!.getUserData()).put("prefFontSize",font!.getSize())
        lAddress!.setBackColor(bcolor!)
        #Layout!.add( lAddress!, "" )

        declare BBjInputE iAddress!
        iAddress! = #Window!.addInputE(#Window!.getAvailableControlID(),0,0,200,font_height+ihpad,"")
        iAddress!.setName("iAddress")
        iAddress!.setUserData(new HashMap())
        iAddress!.setFont(font!); cast(HashMap, iAddress!.getUserData()).put("prefFontSize",font!.getSize())
        #Layout!.add( iAddress!, "spanx, wrap unrel:push" )

        rem child window (pane) for the buttons to test button tags
        cWinFlags$=$00000000$
        rem cWinFlags$=IOR(cWinFlags$,$00000004$); rem Includes a horizontal scroll bar with the child window. The scroll bar is only visible if this flag is set, 
        rem            the 'TRACK'(0) mnemonic is used to prevent image scaling, and either the child window or the virtual drawing surface is resized.
        rem cWinFlags$=IOR(cWinFlags$,$00000008$); rem Includes a vertical scroll bar with the child window. The scroll bar is only visible if this flag is set, 
        rem            the 'TRACK'(0) mnemonic is used to prevent image scaling, and either the child window or the virtual drawing surface is resized.
        rem cWinFlags$=IOR(cWinFlags$,$00000010$); rem Sets the child window to be initially invisible.
        rem cWinFlags$=IOR(cWinFlags$,$00000020$); rem Sets the child window to be initially disabled.
        cWinFlags$=IOR(cWinFlags$,$00000800$); rem Creates a child window without a border.
        cWinFlags$=IOR(cWinFlags$,$00010000$); rem Activates keyboard navigation in the child window. 
        rem            If this flag is specified, key pressed ("t") events for arrow keys and the tab key will not be reported.
        rem cWinFlags$=IOR(cWinFlags$,$00100000$); rem Automatically arranges all controls to fit within the child window.
        rem cWinFlags$=IOR(cWinFlags$,$00200000$); rem Attaches the child window to one side of the parent frame, by default to the top frame. 
        rem            It will always occupy the full extent of the parent window's edge (even if the parent is resized later), 
        rem            but the other dimension is determined by the width or height specified when the child was created. 
        rem            By default, docked child windows are attached to the top of their parent. This can be changed with the 'DOCK' mnemonic.
        rem cWinFlags$=IOR(cWinFlags$,$00800000$); rem Sets the <Enter> key to behave as a <Tab> key.
        rem cWinFlags$=IOR(cWinFlags$,$01000000$); rem Draws a recessed client edge around the child window.
        rem cWinFlags$=IOR(cWinFlags$,$02000000$); rem Draws a raised edge around the child window.
        #cWindow! = #Window!.addChildWindow(#Window!.getAvailableControlID(),0,70,#Window!.getWidth(),25,"",cWinFlags$,#SysGui!.getAvailableContext())
        #cWindow!.setName("cWindow")
        #cWindow!.setUserData(new HashMap())
        #cWindow!.setFont(font!); cast(HashMap, #cWindow!.getUserData()).put("prefFontSize",font!.getSize())
        #cWindow!.setBackColor(bcolor!)

        #cLayout! = new BBMigPane(#cWindow!, "nogrid,fill")

        bwpad=16,bhpad=16; rem button width/height padding

        declare BBjMenuButton bOk!
        bOk! = #cWindow!.addMenuButton(#cWindow!.getAvailableControlID(),0,0,num(tm!.get(tidOk))+bwpad,font_height+bhpad,str(tx!.get(tidOk)))
        bOk!.setName("bOk")
        bOk!.setUserData(new HashMap())
        bOk!.setFont(font!); cast(HashMap, bOk!.getUserData()).put("prefFontSize",font!.getSize())
        #cLayout!.add( bOk!, "tag ok,wmin button,sg btn" )

        declare BBjMenuButton bCancel!
        bCancel! = #cWindow!.addMenuButton(#cWindow!.getAvailableControlID(),0,0,num(tm!.get(tidCancel))+bwpad,font_height+bhpad,str(tx!.get(tidCancel)))
        bCancel!.setName("bCancel")
        bCancel!.setUserData(new HashMap())
        bCancel!.setFont(font!); cast(HashMap, bCancel!.getUserData()).put("prefFontSize",font!.getSize())
        #cLayout!.add( bCancel!, "tag cancel,wmin button,sg btn" )

        declare BBjMenuButton bHelp!
        bHelp! = #cWindow!.addMenuButton(#cWindow!.getAvailableControlID(),0,0,num(tm!.get(tidHelp))+bwpad,font_height+bhpad,str(tx!.get(tidHelp)))
        bHelp!.setName("bHelp")
        bHelp!.setUserData(new HashMap())
        bHelp!.setFont(font!); cast(HashMap, bHelp!.getUserData()).put("prefFontSize",font!.getSize())
        #cLayout!.add( bHelp!, "tag help,wmin button,sg btn" )

        declare BBjMenuButton bHelp2!
        bHelp2! = #cWindow!.addMenuButton(#cWindow!.getAvailableControlID(),0,0,num(tm!.get(tidHelp2))+bwpad,font_height+bhpad,str(tx!.get(tidHelp2)))
        bHelp2!.setName("bHelp2")
        bHelp2!.setUserData(new HashMap())
        bHelp2!.setFont(font!); cast(HashMap, bHelp2!.getUserData()).put("prefFontSize",font!.getSize())
        #cLayout!.add( bHelp2!, "tag help2,wmin button,sg btn" )

        #cLayout!.layoutChildren()
        #Layout!.add( #cWindow!, "south")
    methodend

classend
