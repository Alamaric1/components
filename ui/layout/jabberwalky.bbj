
use ::components/ui/layout/BBMigPane.bbj::BBMigPane

use java.awt.Dimension

class public jabberwalky
    field private BBjAPI    API! = BBjAPI()
    field private BBjNumber TRUE = BBjAPI().TRUE
    field private BBjNumber FALSE = BBjAPI().FALSE
    field private BBjSysGui SysGui! = #API!.openSysGui("X0")

    field private BBjTopLevelWindow Window!
    field private BBMigPane Layout!
    
    field public BBjNumber ActiveResize
    field public BBjNumber ResizeEventWidth
    field public BBjNumber ResizeEventHeight

    method public jabberwalky()

        WinFlags$=$00000000$
        WinFlags$=IOR(WinFlags$,$00000001$); rem Allows the window to be resized.
        WinFlags$=IOR(WinFlags$,$00000002$); rem Includes a close box with the window.
        rem WinFlags$=IOR(WinFlags$,$00000004$); rem Causes a horizontal scroll bar to appear if the window contents are not scaled, or the window is resized so that the entire contents are not displayed.
        rem WinFlags$=IOR(WinFlags$,$00000008$); rem Causes a vertical scroll bar to appear if the window contents are not scaled, or the window is resized so that the entire contents are not displayed.
        WinFlags$=IOR(WinFlags$,$00000010$); rem Allows the window to be initially invisible.
        rem WinFlags$=IOR(WinFlags$,$00000020$); rem Allows the window to be initially disabled.
        WinFlags$=IOR(WinFlags$,$00000080$); rem Allows the window to be maximized or minimized.
        rem WinFlags$=IOR(WinFlags$,$00000100$); rem Sets the window to be initially minimized.
        rem WinFlags$=IOR(WinFlags$,$00000800$); rem Include menu bar. Creates a menu bar.
        rem WinFlags$=IOR(WinFlags$,$00001000$); rem Sets the window to be initially maximized.
        rem WinFlags$=IOR(WinFlags$,$00002000$); rem Prevents the separator line between the menu and client area of a window from being drawn.
        WinFlags$=IOR(WinFlags$,$00010000$); rem Activates keyboard navigation in the window. If this flag is specified, key pressed ("t") events for arrow keys and the tab key will not be reported.
        rem WinFlags$=IOR(WinFlags$,$00020000$); rem Always positions the window on top of other windows.
        rem WinFlags$=IOR(WinFlags$,$00040000$); rem Creates a border around the dialog.
        rem WinFlags$=IOR(WinFlags$,$00080000$); rem Sets the window to behave as a dialog.
        rem WinFlags$=IOR(WinFlags$,$00100000$); rem Automatically arranges all controls and child windows placed in the window to fit.
        WinFlags$=IOR(WinFlags$,$00400000$); rem Allows use of a custom color palette. This provides a more accurate display of colors in bitmapped images.
        WinFlags$=IOR(WinFlags$,$00800000$); rem Sets the <Enter> key to behave as a <Tab> key.
        rem WinFlags$=IOR(WinFlags$,$01000000$); rem Creates the window without a title bar.
        WinFlags$=IOR(WinFlags$,$04000000$); rem Sets the window to automatically manage SYSCOLOR events.
        rem WinFlags$=IOR(WinFlags$,$20000000$); rem Causes Visual PRO/5 to report the mouse's right button down event.
        rem WinFlags$=IOR(WinFlags$,$40000000$); rem Sets the window to be group-modal within an MDI group.
        rem  Event masks to be applied to the window:
        #Window! = #SysGui!.addWindow(500,500,500,500,"BBMigPane Layout Test",WinFlags$)
        #Window!.setName("window")
        
        #Layout! = new BBMigPane(#Window!, "", "[grow]", "[grow]")

        lFirstName! =  #Window!.addStaticText(#Window!.getAvailableControlID(),12,12,80,25,"First Name")
        lFirstName!.setName("lFirstName")
        #Layout!.add( lFirstName!, "align label, growx" )
        
        iFirstName! = #Window!.addInputE(#Window!.getAvailableControlID(),95,12,100,25,"")
        iFirstName!.setName("iFirstName")
        #Layout!.add( iFirstName!, "growx" )
        
        lSurname! = #Window!.addStaticText(#Window!.getAvailableControlID(),180,12,80,25,"Surname")
        lSurname!.setName("lSurname")
        #Layout!.add( lSurname!, "gap unrel, align label, growx" )
        
        iSurname! = #Window!.addInputE(#Window!.getAvailableControlID(),265,12,100,25,"")
        iSurname!.setName("iSurname")
        #Layout!.add( iSurname!, "growx, wrap" )
        
        lAddress! = #Window!.addStaticText(#Window!.getAvailableControlID(),12,45,80,25,"Address")
        lAddress!.setName("lAddress")
        #Layout!.add( lAddress!, "align label, growx" )
        
        iAddress! = #Window!.addInputE(#Window!.getAvailableControlID(),95,45,200,25,"")
        iAddress!.setName("iAddress")
        #Layout!.add( iAddress!, "growx, spanx, wrap 24" )

        bOk! = #Window!.addButton(1,12,150,25,25,"OK")
        bOk!.setName("bOk")
        #Layout!.add( bOk!, "sizegroup btngrp, tag ok" )

        bCancel! = #Window!.addButton(2,65,150,55,25,"Cancel")
        bCancel!.setName("bCancel")
        #Layout!.add( bCancel!, "sizegroup btngrp, tag cancel" )

        bHelp! = #Window!.addButton(#Window!.getAvailableControlID(),120,150,40,25,"Help")
        bHelp!.setName("bHelp")
        #Layout!.add( bHelp!, "sizegroup btngrp, tag help" )

        bHelp2! = #Window!.addButton(#Window!.getAvailableControlID(),185,150,90,25,"Second Help")
        bHelp2!.setName("bHelp2")
        #Layout!.add( bHelp2!, "sizegroup btngrp, tag help2" )
        
        #Layout!.layoutChildren()
       
        #show()
    methodend

    method public void show()
        #Window!.setCallback(#Window!.ON_CLOSE, #this!, "closeWindow")
        #Window!.setCallback(#Window!.ON_RESIZE, #this!, "windowResize")
        #Window!.setCallback(#Window!.ON_SCREEN_RESIZE, #this!, "screenResize")
        #Window!.setVisible(#TRUE)
        process_events
    methodend

    method public void closeWindow(BBjCloseEvent ev!)
        release
    methodend
    
    method public void windowResize(BBjResizeEvent p_event!)
        if !(#ActiveResize)
            #ActiveResize = #TRUE
            #API!.createTimer("ResizeEventTimer", .2, #this!, "resizeTimerEvent")
        endif
        #ResizeEventWidth = p_event!.getWidth()
        #ResizeEventHeight = p_event!.getHeight()
    methodend

    method public void screenResize(BBjScreenResizeEvent p_event!)
        if !(#ActiveResize)
            #ActiveResize = #TRUE
            #API!.createTimer("ResizeEventTimer", .2, #this!, "resizeTimerEvent")
        endif
        #ResizeEventWidth = p_event!.getWidth()
        #ResizeEventHeight = p_event!.getHeight()
    methodend

    method public void resizeTimerEvent(BBjTimerEvent p_event!)
        #Layout!.layoutChildren()
        #API!.removeTimer("ResizeEventTimer")
        #ActiveResize = #FALSE
    methodend
    
classend


new jabberwalky()