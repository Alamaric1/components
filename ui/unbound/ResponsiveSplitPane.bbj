
use ::components/ui/unbound/WindowStack.bbj::WindowStack

class public ResponsiveSplitPane


    field private BBjNumber X
    field private BBjNumber Y
    field private BBjNumber W
    field private BBjNumber H
    field private BBjChildWindow CwCanvas!
    field private BBjChildWindow CwLeft!
    field private BBjChildWindow CwRight!
    field private BBjNumber WasBackButtonInvisible=1
    field private BBjNumber SlideOpen
    field private BBjCheckBox    CbPin!
    field private BBjControl UiwLeft!
    field private BBjControl UiwRight!
    field private BBjNumber DisplayMode
    field private BBjNumber PreferredLeftSize = 300
    
    field private BBjNumber AutoHideLeft = 1

    method public ResponsiveSplitPane(BBjWindow wnd!, BBjNumber id, BBjNumber x, BBjNumber y, BBjNumber w, BBjNumber h)

        #X = x
        #Y = y
        #W = w
        #H = h
        #CwCanvas! = wnd!.addChildWindow(id,x,y,w,h,"",$00000800$,BBjAPI().getSysGui().getAvailableContext())
        #setup()
    methodend
    
    method public ResponsiveSplitPane(BBjChildWindow wnd!)
        #CwCanvas! = wnd!
        #X = wnd!.getX()
        #Y = wnd!.getY()
        #W = wnd!.getWidth()
        #H = wnd!.getHeight()
        #setup()
    methodend
    
    method private void setup()
        
        #CwRight!    = #CwCanvas!.addChildWindow(101,10,10,10,10,"",$00000810$,BBjAPI().getSysGui().getAvailableContext())
        #CwRight!.addStyle("FormWnd")
        #CwRight!.setName("CwRight") 
        #CwLeft!     = #CwCanvas!.addChildWindow(100,0,0,10,10,"",$00000800$,BBjAPI().getSysGui().getAvailableContext())
REM         #BtnBack! = #CwCanvas!.addButton(200,10,10,30,30,"",$0010$)
REM         #BtnBack!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onButtonBack")
REM         #BtnBack!.setName("BackButton")
REM         #BtnBack!.addStyle("BackButtonStyle")

        #CbPin! = #CwLeft!.addCheckBox(202,1000,1000,16,16,"")
        #CbPin!.setCallback(BBjAPI.ON_CHECK_ON,#this!,"onCbPinCheck")
        #CbPin!.setCallback(BBjAPI.ON_CHECK_OFF,#this!,"onCbPinUncheck")
        
        #CbPin!.addStyle("PinButtonStyle")
        
        #AutoHideLeft = num(BBjAPI().getThinClient().getUserProperty("ResponsiveSplitPaneAutoHide",err=*next),err=*next)
        #CbPin!.setSelected (#AutoHideLeft) 
              
        #setSize(#W,#H)
        
    methodend
    
    method public void onButtonBack( BBjButtonPushEvent ev!)
        #activateLeft()
    methodend

    method public void onCbPinCheck( BBjCheckOnEvent ev!)
        #AutoHideLeft = 1
        BBjAPI().getThinClient().setUserProperty("ResponsiveSplitPaneAutoHide","1")
        #setSize(#W,#H)
    methodend

    method public void onCbPinUncheck( BBjCheckOffEvent ev!)
        #AutoHideLeft = 0
        BBjAPI().getThinClient().setUserProperty("ResponsiveSplitPaneAutoHide","0")
        #setSize(#W,#H)
    methodend


    method public void setSize(BBjNumber w!, BBjNumber h!)
    
        #H = h!
        #W = w!
        #CwCanvas!.setSize(w!,h!)
        
        
        if w! >2*#PreferredLeftSize then
            #DisplayMode = 0   ; rem tablet
        else
            if #DisplayMode <>2 then
                #DisplayMode = 1 ; rem show left pane in phone mode when mode was tablet before
            fi
        fi

        
        
        switch #DisplayMode
            case 0
              #CwLeft!.setSize(#PreferredLeftSize,h!)
              #CbPin!.setLocation(#PreferredLeftSize-20,h!-20)
              #CbPin!.setVisible(1)
              
              if #UiwLeft!<>null() then
                #UiwLeft!.setSize(#PreferredLeftSize,h!-40)
              fi       
                        
              #CwLeft!.setLocation(0,0)
              #CwLeft!.setVisible(1)              
              #CwRight!.setSize(w!-#PreferredLeftSize,h!)
              if #UiwRight!<>null() then
                 if #AutoHideLeft then
                    #UiwRight!.setSize(w!,h!)
                 else
                    #UiwRight!.setSize(w!-#PreferredLeftSize,h!)
                 fi
              fi
                     
              
              #CwRight!.setVisible(1)
REM               #BtnBack!.setVisible(0)
              
              if #AutoHideLeft then
                #CwRight!.setLocation(0,0)
                if #SlideOpen then
                  #CwRight!.setEnabled(1)
                  #CwLeft!.setVisible(0)
                else
                  #CwRight!.setEnabled(0)
                  #CwLeft!.setVisible(1)
                fi
              else
              
                #CwRight!.setLocation(#PreferredLeftSize+1,0)
                #CwRight!.setEnabled(1)
              fi

            break
            
            case 1
              #activateLeft()
              #SlideOpen=0
            break

            case 2
                  #activateRight()
                  #SlideOpen=1
            break
        swend
        
        
    
    methodend
    
    method public void activateRight()

              if #DisplayMode = 0 then 
                if #AutoHideLeft then
                    #CwLeft!.setVisible(0)
                    #SlideOpen=1    
                    #CwRight!.setEnabled(1)
                fi
              else
                  #DisplayMode = 2 
                  if #UiwRight!<>null() then
                    #UiwRight!.setSize(#W,#H)
                  fi
                  #CwRight!.setVisible(1)
                  #CwLeft!.setVisible(0)
              fi
   
              if #AutoHideLeft then
                if WindowStack.getShowBackButton() = 0 then
                    #WasBackButtonInvisible=1
                else
                    #WasBackButtonInvisible=0
                fi
                WindowStack.setShowBackButton(1)
                WindowStack.setBackButtonAction(#this!,"activateLeft",null())
              fi
    methodend

    method public void activateLeft()

              if #DisplayMode = 0 then 
                if #AutoHideLeft then
                    #CwLeft!.setVisible(1)
                    #SlideOpen=0  
                    #CwRight!.setEnabled(0)  
                fi
              else
                  #DisplayMode=1
                  #CwLeft!.setVisible(1)
                  #CwRight!.setVisible(0)
              fi
              WindowStack.setBackButtonAction(null(),"",null())
              if #WasBackButtonInvisible then
              
                WindowStack.setShowBackButton(0)
              fi
    methodend


    method public BBjChildWindow getLeft()
    
        methodret #CwLeft!
        
    methodend

    method public BBjChildWindow getRight()
    
        methodret #CwRight!
        
    methodend
    
    method public void setUiwLeft(BBjControl uiw!)
        
            #UiwLeft! = uiw!
            
    methodend

    method public void setUiwRight(BBjControl uiw!)
        
            #UiwRight! = uiw!
            
    methodend
    
    method public void destroy()
    
    methodend
    

classend

sg! = BBjAPI().openSysGui("X0")

if INFO(3,6)="5" then 
  wnd! = sg!.addWindow(0,0,1024,768,"",$01081010$ )
  wnd!.setCallback(BBjAPI.ON_SCREEN_RESIZE,"resize")
else
  wnd! = sg!.addWindow(0,0,1024,768,"")
  wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")
fi

wnd!.setCallback(wnd!.ON_CLOSE,"byebye")
wnd!.setVisible(1)



cw! = wnd!.addChildWindow(100,0,00,wnd!.getWidth(),wnd!.getHeight(),"",$00000800$,BBjAPI().getSysGui().getAvailableContext())
split! = new ResponsiveSplitPane(cw!)
split!.setSize(wnd!.getWidth(),wnd!.getHeight())

btn! = split!.getLeft().addButton(100,10,10,250,25,"klick")
btn!.setCallback(btn!.ON_BUTTON_PUSH,"flip")

wnd!.focus()
? 'HIDE'

process_events

byebye:
bye

flip:
    split!.activateRight()
return

resize:
    ev! = BBjAPI().getLastEvent()
    w = ev!.getWidth()
    h = ev!.getHeight()
    
    split!.setSize(w,h)
return

WIN_CLOSE:
    release
