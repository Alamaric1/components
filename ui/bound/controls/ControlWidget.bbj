use ::components/ui/unbound/UIWidget.bbj::UIWidget
use ::components/ui/bound/UIComponent.bbj::UIComponent
use ::components/ui/layout/BBMigPane.bbj::BBMigPane
use com.basis.dbcomponents.DataRow
use com.basis.dbcomponents.DataField
use ::components/bl/BusinessComponent.bbj::BusinessComponent

use ::translations/bbtranslator.bbj::BBTranslator
use ::i18n/CustomTranslator.bbj::CustomTranslator

use net.miginfocom.layout.PlatformDefaults

class public ControlWidget extends UIComponent  implements BBjControl 
 
    
    field protected BBjControl    Ctrl!
    field protected BBjNumber     Length
    field protected BBjNumber     Edited = 0 
    field protected BBjNumber     Focus = 0     
    
    field private BBjChildWindow WndCache!   
    
    field protected static BBjNumber charw = BBjAPI().getSysGui().getMeasure("W") +2
    
    field public static BBTranslator CustomTranslator!


    method protected ControlWidget(BBjChildWindow cwCanvas!)
        #super!(cwCanvas!)
        
        if #CustomTranslator! = null() then
             #CustomTranslator! = new CustomTranslator()
        fi
        
    methodend
    

    method protected void setCtrl (BBjControl ctrl!)

        #Ctrl!= ctrl!
        #Ctrl!.setCallback(BBjAPI.ON_GAINED_FOCUS,#this!,"onCtrlGainedFocus",err=*next)
        #Ctrl!.setCallback(BBjAPI.ON_LOST_FOCUS,#this!,"onCtrlLostFocus",err=*next)
REM         #Ctrl!.setCallback(BBjAPI.ON_EDIT_MODIFY,#this!,"onCtrlEditModify",err=*next)

REM PRIM KEY?
REM                     if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 and ctrl!.getControlType() <> 17 and ctrl!.getControlType() <> 19 then
REM                         ctrl!.setCallback(BBjAPI.ON_INPUT_KEYPRESS,#this!,"onCtrlInputKeypress",err=*next)
REM                     fi
        a! = #Ctrl!
        a!.setEditable(0,err=*next) 
        a!.setFocusable(0,err=*next)
        
    methodend
    
    method public void setLength(BBjNumber length)
        #Length=length
        #setSize(30+length*#charw,#getHeight())
    methodend 
    
    method public void getLength(BBjNumber length)
        methodret #getLength()
    methodend 
    
    method public void setText(BBjString text$)
        #getCtrl().setText(text$)
    methodend
    
    method public void setMask(BBjString mask$)
        c! = #getCtrl()
        c!.setMask(mask$,err=*next)
    methodend

    method public void setTextKey(BBjString textkey$)
        #getCtrl().setText( #CustomTranslator!.getTranslation(textkey$)  )
    methodend
    
    
    method public void setName(BBjString text$)
        #getCtrl().setName(text$)
    methodend    
 
     

     method public void setFont(BBjFont font!)
        #getCtrl().setFont(font!)
    methodend  
    
     method public void setBackColor(BBjColor col!)
        #getCtrl().setBackColor(col!)
    methodend      
           
    method public BBjNumber getWidth()
        methodret #getWnd().getWidth()
    methodend

    method public BBjNumber getHeight()
        methodret #getWnd().getHeight()
    methodend

    method public Boolean isVisible()
        methodret #getWnd().isVisible()
    methodend

    method public String getName()
        methodret #getCtrl().getName()
    methodend
    
    method public void setLocation(BBjNumber x!, BBjNumber y!)
        #getWnd().setLocation(x!,y!)
        
    methodend

    method public void setSize(BBjNumber w!, BBjNumber h!)
        #getWnd().setSize(w!,h!) 
        #getCtrl().setSize(w!-30,h!) 
    methodend


    rem /**
    rem * Method onSelectionChange:
    rem * This method is called from the business component when the selection changed
    rem */
    method public void onSelectionChange()

        
        #displayData()
        #enableControl(1)

    methodend
    
    rem override for widgets like Date or so
   method public void displayData()

            if #getBindField() >""then
            
                if #getBC().getSelection().size()=1 then
                    rem #getBC().prepareResultSet(0,0)
                    sel=#getBC().getSelection().getItem(i)
                    
                    r! = cast(DataRow,#getBC().getResultSet().getItem(sel))
                    text$     = r!.getFieldAsString(#getBindField(),err=*next)
                    
                    #Ctrl!.setText(text$)
                else
                    #Ctrl!.setText("")
                fi
    
                #Edited = 0
            fi
            
    methodend    


    method protected void enableControl(BBjNumber fEditing)
    
            if #getBC().getPrimaryKeySegments().indexOf(#getBindField())>-1 then
                #Ctrl!.setEnabled(!fEditing)
            else
                #Ctrl!.setEnabled(fEditing)
            fi
              
   methodend    

   method public void onCtrlGainedFocus(BBjGainedFocusEvent ev!)

        if #getBC().getSelection().size() then
            recno=#getBC().getSelection().getItem(0)
            #getBC().setEditedRecord(recno)
        fi
        
        #Edited = 1
        #Focus = 1

REM         if #EditedRec! = null() and #Rec! <> null() then
REM             #EditedRec! = cast(DataRow,#Rec!.clone())
REM         fi
REM 
REM         if #EditedFields! = null() then
REM             #EditedFields! = new java.util.HashMap()
REM         fi
REM 
REM         #EditedFields!.put(ev!.getControl().getName(),null())
REM         rem put null() to mark that the field has gained the focus. lostFocus will then asynchronously collect the data

    methodend


REM     method public void onCtrlInputKeypress(BBjInputKeypressEvent ev!)
REM 
REM         if ev!.getControl().getText()>"" and (ev!.getKeyCode() = 13 or ev!.getKeyCode() = 9) then
REM             #searchRecord()
REM         fi
REM 
REM     methodend


    method public void onCtrlLostFocus(BBjLostFocusEvent ev!)

        #Focus = 0

REM         ctrl_name$=ev!.getControl().getName()
REM 
REM         if #EditedFields! <> null() and #ControlList!.get(ctrl_name$)<>null() then
REM             v$=ev!.getText()
REM 
REM             if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 and v$="" then
REM                 methodret
REM                 rem don't validate primary key fields as long as they're empty
REM             fi
REM 
REM             if #EditedRec! = null() or v$<>cvs(#EditedRec!.getFieldAsString(ctrl_name$),2) then
REM                 #EditedFields!.put(ctrl_name$,v$)
REM 
REM                 validate = #getBC().validateField(ctrl_name$, v$, #EditedRec!, #EditedFields!)
REM                 #this!.markValidationErrors()
REM             else
REM                 #EditedFields!.remove(ctrl_name$)
REM                 print ctrl_name$,"-> deleted"
REM             fi
REM         fi
REM 
    methodend
REM 
REM 
REM     method public void onCtrlEditModify(BBjEditModifyEvent ev!)
REM 
REM         text$=ev!.getText()
REM         #getBC().broadcastEdit(ev!.getControl().getName(),text$,err=*next)
REM 
REM     methodend

    rem /**
    rem * Method setEditing:
    rem * invoked from BusinessComponent if a UI component started editing a record in the resultset
    rem * @param BBjNumber isEditing: -1 = i
    rem */
    method public void setEditing(BBjNumber isEditing)
    
        if isEditing=0 then
            #Ctrl!.setText("")
            #Edited=0
        fi
    
    methodend

    rem /**
    rem * Method newRecord:
    rem * invoked from BusinessComponent, broadcast that the user wants to create a new record
    rem */
    method public void newRecord()
        #Ctrl!.setEnabled(1)
    methodend
    
    rem /**
    rem * Method restoreEditedField:
    rem * invoked from BusinessComponent, broadcast that the user wants to restore the field currently being edited
    rem */
    method public void restoreEditedField()

        if #Focus then
            #displayData()
        fi
        
    methodend

    rem /**
    rem * Method isEdited:
    rem * @return BBjNumber isEdited: 1 if the widget contains unsaved alternations 
    rem */
    method public BBjNumber isEdited()
        methodret #Edited
    methodend
    
    rem /**
    rem * Method prepareSave:
    rem * add the field's unsaved contents to the DataRow object
    rem  * 
    rem  * override to handle special formats, like date!!!
    rem  * 
    rem * @param DataRow row!: the row to collect the changes
    rem * @return DataRow: the row with the changes being added
    rem */
    method public DataRow prepareSave(DataRow r!)
    
        if #Edited then
            r!.setFieldValue(#getBindField(),#Ctrl!.getText())
        fi
        
        methodret r!
        
    methodend  
    
    rem /**
    rem * Method refresh:
    rem * refresh the displayed data
    rem * @param BusinessComponent bc!: the business component
    rem */
    method public void refresh(BBjNumber resetFilter)

        #displayData()

    methodend    

    method public void setCssClass(BBjString class$)
        #super!.setCssClass(class$)
        #Ctrl!.addStyle(class$)
    methodend

    method public void setCallback(int eventtype!, CustomObject o!, String method!)
    
        #Ctrl!.setCallback(eventtype!,o!,method!)
        
    methodend

        rem /**
    rem * Method setBC:
    rem * set the business component to drive this UI component
    rem * @param BusinessComponent bc!: the business component
    rem */
    method public void setBC(BusinessComponent bc!)

        #super!.setBC(bc!)

        ctrl_name$=#getCtrl().getName()
        if pos(".label"=ctrl_name$)>0 then
            lbl$ = #getBC().getColumnAttributes().getFieldAttribute(ctrl_name$(1,len(ctrl_name$)-6),"LABEL",err=*endif)
            #Ctrl!.setText(lbl$+":")
        fi
        
    methodend

classend
