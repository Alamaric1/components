? 'HIDE',

class public SoftLockRemoteEditEvent

    field public BBjString          KeyValue$
    field public java.util.HashMap  EditedList!

classend

class public SoftLockController

    field private BBjString     TableName$
    field private BBjNamespace  Ns!
    field private BBjNamespace  ListNs!

    rem vars for editor-role
    field private BBjString     LockedKey$




    method private SoftLockController()


    methodend


    method public SoftLockController(BBjString tableName$)

        #TableName$=tableName$
        #ListNs!=BBjAPI().getNamespace("SoftLockController",#TableName$,1)


    methodend


    method public void onListNameSpace(BBjNamespaceEvent ev!)

        record$ = ev!.getVariableName()

        if record$>"" and record$<>#LockedKey$ then

            if ev!.getNewValue() = "1" then
                BBjAPI().postPriorityCustomEvent("SoftLockStart",record$)
            else
                BBjAPI().postPriorityCustomEvent("SoftLockStop",record$)
            fi

        fi


    methodend

    method public BBjNumber setLock(BBjString keyValue$)

        if #LockedKey$>"" then
            #removeLock()
        fi

        #ListNs!.setValue(keyValue$,"1",err=couldNotLock)
        #ListNs!.setLock(keyValue$,10,err=couldNotLock)
        #LockedKey$=keyValue$

        #Ns!=BBjAPI().getNamespace("SoftLockRemoteEditController",#TableName$,1)


        methodret 1

        couldNotLock:
        throw "could not acquire lock",0


    methodend


    method public BBjNumber isLocked(BBjString keyValue$)


        a!=#ListNs!.getValue(keyValue$,err=notLocked)
        #ListNs!.setLock(keyValue$,10,err=isLocked)
        #ListNs!.removeLock(keyValue$)

        notLocked:

        methodret 0

        isLocked:

        methodret 1


    methodend


    method public void removeLock()

        if #LockedKey$="" then
            throw "not locked",0
        fi

        #Ns!.clear()
        #ListNs!.setValue(#LockedKey$,"2")
        #ListNs!.removeLock(#LockedKey$)
        #ListNs!.removeValue(#LockedKey$,err=*next)

        #LockedKey$=""

    methodend

    method public void onRemoteEdit(BBjNamespaceEvent ev!)

        variable$   = ev!.getVariableName()
        hm!         = ev!.getNewValue()

        declare SoftLockRemoteEditEvent event!
        event! = new SoftLockRemoteEditEvent()
        event!.setKeyValue(variable$)
        event!.setEditedList(hm!)
        BBjAPI().postPriorityCustomEvent("SoftLockRemoteEdit",event!)

    methodend

    method public void broadcastEdit(BBjString fieldName$, BBjString value$)

        if  #LockedKey$="" then
            throw "not locked",18
        fi

        hm! = #Ns!.getValue(#LockedKey$,err=*next)

        if hm! = null() then
            hm! = new java.util.HashMap()
        fi

        hm!.put(fieldName$,value$)
        #Ns!.removeValue(#LockedKey$,err=*next)
        #Ns!.setValue(#LockedKey$,hm!)

    methodend


    method public void setCallbackForSoftlock(BBjString labelOnLockStart$, BBjString labelOnLockStop$)

        #setCallbackForSoftlock(null(),labelOnLockStart$,  labelOnLockStop$)

    methodend

    method public void setCallbackForSoftlock(CustomObject o!, BBjString labelOnLockStart$, BBjString labelOnLockStop$)


        #ListNs!.removeCallbackForVariableChange(#NotifyOnLockKey$,err=*next)

        if o!=null() then
            BBjAPI().setCustomEventCallback("SoftLockStart",labelOnLockStart$)
            BBjAPI().setCustomEventCallback("SoftLockStop",labelOnLockStop$)
        else
            BBjAPI().setCustomEventCallback("SoftLockStart",o!,labelOnLockStart$)
            BBjAPI().setCustomEventCallback("SoftLockStop",o!,labelOnLockStop$)
        fi

        #ListNs!.setCallbackForNamespaceChange(#this!,"onListNameSpace")


    methodend

    method public void setCallbackForRemoteEdit( BBjString labelOnRemoteEdit$ )

        #setCallbackForRemoteEdit( null(),  labelOnRemoteEdit$ )

    methodend

    method public void setCallbackForRemoteEdit( CustomObject o!, BBjString labelOnRemoteEdit$ )

        if o!=null() then
            BBjAPI().setCustomEventCallback("SoftLockRemoteEdit",labelOnRemoteEdit$)
        else
            BBjAPI().setCustomEventCallback("SoftLockRemoteEdit",o!,labelOnRemoteEdit$)
        fi

        #Ns!=BBjAPI().getNamespace("SoftLockRemoteEditController",#TableName$,1)
        #Ns!.setCallbackForNamespaceChange(#this!,"onRemoteEdit")

    methodend

    method public void clearCallbackForSoftlock()

        #ListNs!.removeCallbackForVariableChange(#NotifyOnLockKey$,err=*next)

        #NotifyOnLockKey$           = ""
        #NotifyOnLockStartLabel$    = ""
        #NotifyOnLockStopLabel$     = ""
        #NotifyOnRemoteEdit$        = ""
        #NotifyOnLockObject!        = null()

        BBjAPI().clearCustomEventCallback("SoftLockStart")
        BBjAPI().clearCustomEventCallback("SoftLockStop")
        BBjAPI().clearCustomEventCallback("SoftLockRemoteEdit")

    methodend



classend




wnd! = BBjAPI().openSysGui("X0").addWindow(100,100,400,100,"TEST")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
ed! = wnd!.addEditBox(100,2,2,200,22,"")


declare SoftLockController s1!
s1! = new SoftLockController("TEST")

a=msgbox("Editor or Listener?",7,"Choose side","Editor","Listener")

if a=1 then
    rem editor

    l=s1!.setLock("1",err=*next)

    if l=0 then
        a=msgbox("Could not acquire lock")
        release
    fi

    ed!.setCallback(BBjAPI.ON_EDIT_MODIFY,"editmodify")


else
    s1!.setCallbackForSoftlock("softlocked", "unsoftlocked")
    s1!.setCallbackForRemoteEdit("remoteedit")

fi


process_events
byebye:

if a=1 then
    s1!.removeLock()
fi

bye


editmodify:
declare auto BBjEditModifyEvent ev!
ev!= BBjAPI().getLastEvent()
text$=ev!.getText()
s1!.broadcastEdit("FIELD",text$)
return

softlocked:
ed!.setEditable(0)
return

unsoftlocked:
ed!.setEditable(1)
return

remoteedit:
declare auto BBjCustomEvent edev!
edev!=BBjAPI().getLastEvent()
evstring! = edev!.getObject()
ed!.setText(evstring!.getFieldAsString("VALUE"))







